<!DOCTYPE html>
<html>
  <head>
    <title>Demo Sails</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!--STYLES END-->

        <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
  </head>

  <body>

    <nav class="navbar navbar-dark bg-inverse navbar-fixed-top">
      <div class="nav navbar-nav">
        <a class="nav-item nav-link active" href="/">Home <span class="sr-only"></span></a>

        <% if(!session.authentificated) { %>
        <a href="/chat/page" class="nav-item nav-link">Chat</a>
        <% } %>
        <% if (session.authenticated) { %>
        <li class="active"><a href="/user/show/<%= session.User.id %>"><%= session.User.name %> </a> </li>
        
        <% } %>
        <a href="/search" class="nav-item nav-link">Look into answers</a>
      </div>
      <div class="nav navbar-nav pull-xs-right">

        <% if (!session.authenticated) { %>
        <a class="btn btn-default navbar-btn navbar-right" href="/session/destroy">sign-out</a>
        <a class="nav-item nav-link" href="/question/new">Add a question</a>
        <a class="nav-item nav-link" href="/answer/new">give us your opinion</a>
        <% } %>

        <% if(!session.authentificated) { %>
        <a class="nav-item nav-link" href="/user/new">Get an account</a>
        <a class="nav-item nav-link" href="/user/login">Get connected</a>
        <% } %>
      </div>
    </nav>

    <div class="row">
      <div class="col-sm-1"></div>
      <div class="col-sm-10"><%- body %></div>
      <div class="col-sm-1"></div>
    </div>
    
    <div style="height: 80px"></div>
    <footer class="footer">
      <div class="container">
        <p class="pull-xs-right">
          <a href="#">Back to top</a>
        </p>
        <p>
          <a href="/user/">list of user</a> &nbsp; 
          <a href="/question/">list of questions</a> &nbsp;
          <a href="/answer/">list of answers</a>
        </p>
      </div>
    </footer>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>